// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package sso

import (
	"gorm.io/gorm"
	"sso-go-gin/config"
	handler2 "sso-go-gin/internal/sso/authorize/handler"
	repository2 "sso-go-gin/internal/sso/authorize/repository"
	service2 "sso-go-gin/internal/sso/authorize/service"
	"sso-go-gin/internal/sso/login/handler"
	"sso-go-gin/internal/sso/login/repository"
	"sso-go-gin/internal/sso/login/service"
	handler3 "sso-go-gin/internal/sso/par/handler"
	repository3 "sso-go-gin/internal/sso/par/repository"
	service3 "sso-go-gin/internal/sso/par/service"
	"sso-go-gin/internal/sso/token"
)

// Injectors from wire.go:

func InitializeSSOHandlers(cfg *config.Config, db *gorm.DB) (*SSOHandlers, error) {
	loginRepository := repository.NewLoginRepository(db)
	loginService := service.NewLoginService(loginRepository)
	loginHandler := handler.NewLoginHandler(loginService)
	authorizeRepository := repository2.NewAuthorizeRepository(db)
	authorizeService := service2.NewAuthorizeService(authorizeRepository)
	authorizeHandler := handler2.NewAuthorizeHandler(authorizeService)
	tokenRepository := token.NewTokenRepository(db)
	tokenService := token.NewTokenService(tokenRepository)
	tokenHandler := token.NewTokenHandler(tokenService)
	parRepository := repository3.NewPARRepository(db)
	parService := service3.NewPARService(parRepository)
	parHandler := handler3.NewPARHandler(parService)
	ssoHandlers := &SSOHandlers{
		LoginHandler:     loginHandler,
		AuthorizeHandler: authorizeHandler,
		TokenHandler:     tokenHandler,
		PARHandler:       parHandler,
	}
	return ssoHandlers, nil
}

// wire.go:

type SSOHandlers struct {
	LoginHandler     *handler.LoginHandler
	AuthorizeHandler *handler2.AuthorizeHandler
	TokenHandler     *token.TokenHandler
	PARHandler       *handler3.PARHandler
}
