// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gin-gonic/gin"
	"sso-go-gin/config"
	"sso-go-gin/internal/sso"
	handler2 "sso-go-gin/internal/sso/authorize/handler"
	"sso-go-gin/internal/sso/login/handler"
	handler3 "sso-go-gin/internal/sso/par/handler"
	"sso-go-gin/internal/sso/token"
	"sso-go-gin/pkg/database"
)

// Injectors from wire.go:

func InitializeApp(cfg *config.Config) (*gin.Engine, error) {
	db, err := database.NewDB(cfg)
	if err != nil {
		return nil, err
	}
	ssoHandlers, err := sso.InitializeSSOHandlers(cfg, db)
	if err != nil {
		return nil, err
	}
	engine := newRouter(ssoHandlers)
	return engine, nil
}

// wire.go:

func newRouter(h *sso.SSOHandlers) *gin.Engine {
	r := gin.Default()

	ssoGroup := r.Group("/sso")
	handler.RegisterRoutes(ssoGroup, h.LoginHandler)
	handler2.RegisterRoutes(ssoGroup, h.AuthorizeHandler)
	token.RegisterRoutes(ssoGroup, h.TokenHandler)
	handler3.RegisterRoutes(ssoGroup, h.PARHandler)

	return r
}
