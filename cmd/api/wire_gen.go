// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gin-contrib/cors"
	"github.com/gin-contrib/sessions"
	"github.com/gin-contrib/sessions/redis"
	"github.com/gin-gonic/gin"
	"path/filepath"
	"sso-go-gin/config"
	"sso-go-gin/internal/sso"
	handler2 "sso-go-gin/internal/sso/authorize/handler"
	"sso-go-gin/internal/sso/login/handler"
	handler3 "sso-go-gin/internal/sso/par/handler"
	"sso-go-gin/internal/sso/token"
	"sso-go-gin/pkg/database"
	"strings"
)

// Injectors from wire.go:

func InitializeApp(cfg *config.Config) (*gin.Engine, error) {
	db, err := database.NewDB(cfg)
	if err != nil {
		return nil, err
	}
	ssoHandlers, err := sso.InitializeSSOHandlers(cfg, db)
	if err != nil {
		return nil, err
	}
	engine := newRouter(ssoHandlers)
	return engine, nil
}

// wire.go:

func newRouter(h *sso.SSOHandlers) *gin.Engine {
	r := gin.Default()

	r.Use(cors.New((cors.Config{
		AllowOrigins:     []string{"http://localhost:8081", "http://localhost:8082"},
		AllowMethods:     []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowHeaders:     []string{"Origin", "Content-Type", "Authorization"},
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
	})))

	store, err := redis.NewStore(10, "tcp", "127.0.0.1:6379", "default", "12345", []byte("secret"))
	if err != nil {
		panic(err)
	}
	r.Use(sessions.Sessions("sso_session", store))

	ssoGroup := r.Group("/api/sso")
	handler.RegisterRoutes(ssoGroup, h.LoginHandler)
	handler2.RegisterRoutes(ssoGroup, h.AuthorizeHandler)
	token.RegisterRoutes(ssoGroup, h.TokenHandler)
	handler3.RegisterRoutes(ssoGroup, h.PARHandler)

	staticDir := "./frontend/dist"
	r.Static("/assets", filepath.Join(staticDir, "assets"))

	r.NoRoute(func(c *gin.Context) {
		if strings.HasPrefix(c.Request.URL.Path, "/api") {
			c.JSON(404, gin.H{"error": "Not Found"})
			return
		}

		if strings.Contains(c.Request.URL.Path, ".") {
			c.Status(404)
			return
		}

		c.File(filepath.Join(staticDir, "index.html"))
	})

	return r
}
